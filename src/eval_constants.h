#pragma once

#include "types.h"

int phase_values[6] = {0, 1, 1, 2, 4, 0};

const int material[6] = {S(71, 75), S(180, 170), S(182, 171), S(207, 272), S(402, 507), S(0, 0)};

int pst[6][64] = {
    // Pawn PST
    {S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),   S(0, 0),    S(0, 0),    S(0, 0),     S(0, 0),
     S(41, 191), S(50, 173), S(36, 140), S(92, 95), S(45, 125), S(136, 93), S(-41, 177), S(-77, 218),
     S(33, 100), S(18, 92),  S(46, 57),  S(50, 13), S(97, -5),  S(116, 23), S(60, 66),   S(28, 81),
     S(10, 72),  S(11, 56),  S(14, 40),  S(37, 13), S(30, 28),  S(32, 35),  S(18, 54),   S(6, 57),
     S(1, 54),   S(-7, 50),  S(13, 33),  S(28, 19), S(32, 26),  S(33, 25),  S(12, 37),   S(1, 37),
     S(-2, 42),  S(-11, 44), S(-1, 36),  S(3, 35),  S(9, 40),   S(22, 35),  S(24, 27),   S(8, 27),
     S(1, 52),   S(11, 43),  S(0, 50),   S(10, 35), S(11, 54),  S(42, 37),  S(50, 30),   S(11, 24),
     S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),   S(0, 0),    S(0, 0),    S(0, 0),     S(0, 0)},
    // Knight PST
    {S(-109, 38), S(-50, 60), S(6, 91),   S(19, 63),   S(131, 52),  S(-21, 61),  S(37, 24),  S(-29, -15),
     S(-16, 72),  S(8, 96),   S(139, 56), S(81, 100),  S(87, 81),   S(137, 49),  S(68, 68),  S(60, 29),
     S(15, 68),   S(119, 70), S(93, 114), S(119, 110), S(151, 92),  S(204, 75),  S(156, 58), S(127, 30),
     S(70, 74),   S(94, 97),  S(77, 132), S(128, 122), S(110, 126), S(137, 110), S(98, 101), S(103, 76),
     S(70, 79),   S(80, 86),  S(90, 118), S(91, 128),  S(101, 117), S(99, 117),  S(107, 96), S(82, 82),
     S(56, 71),   S(67, 90),  S(82, 92),  S(84, 110),  S(97, 106),  S(98, 84),   S(101, 63), S(68, 72),
     S(55, 58),   S(31, 77),  S(64, 85),  S(86, 83),   S(85, 87),   S(80, 72),   S(60, 70),  S(69, 41),
     S(-48, 104), S(66, 55),  S(29, 75),  S(49, 92),   S(80, 72),   S(42, 81),   S(68, 49),  S(60, 33)},
    // Bishop PST
    {S(65, 94),   S(75, 92),   S(-57, 123), S(-25, 121), S(18, 122),  S(23, 114),  S(68, 109),  S(107, 78),
     S(46, 116),  S(84, 108),  S(49, 123),  S(34, 111),  S(103, 109), S(136, 100), S(95, 107),  S(45, 99),
     S(91, 108),  S(113, 104), S(132, 105), S(115, 104), S(125, 108), S(155, 110), S(134, 109), S(119, 107),
     S(82, 107),  S(113, 112), S(98, 125),  S(142, 121), S(119, 129), S(129, 119), S(111, 107), S(100, 115),
     S(91, 103),  S(104, 111), S(109, 123), S(118, 132), S(131, 113), S(99, 122),  S(104, 106), S(110, 101),
     S(93, 103),  S(111, 109), S(105, 122), S(105, 121), S(103, 129), S(127, 105), S(106, 108), S(104, 102),
     S(101, 105), S(113, 92),  S(109, 103), S(94, 111),  S(104, 110), S(101, 105), S(128, 85),  S(95, 81),
     S(67, 102),  S(102, 116), S(91, 105),  S(84, 112),  S(86, 110),  S(78, 109),  S(44, 122),  S(76, 107)},
    // Rook PST
    {S(140, 252), S(152, 246), S(113, 265), S(177, 240), S(184, 239), S(123, 256), S(142, 250), S(140, 247),
     S(134, 253), S(131, 257), S(165, 246), S(175, 241), S(196, 222), S(210, 226), S(125, 260), S(153, 245),
     S(105, 254), S(127, 253), S(128, 248), S(136, 246), S(125, 243), S(190, 220), S(219, 214), S(152, 225),
     S(97, 251),  S(114, 244), S(119, 258), S(137, 238), S(135, 241), S(174, 232), S(134, 236), S(112, 250),
     S(94, 247),  S(106, 249), S(111, 250), S(126, 238), S(136, 228), S(135, 228), S(162, 218), S(109, 232),
     S(102, 235), S(115, 235), S(120, 227), S(123, 229), S(132, 222), S(151, 211), S(143, 217), S(117, 216),
     S(103, 232), S(122, 227), S(114, 232), S(130, 232), S(142, 216), S(145, 214), S(140, 211), S(81, 237),
     S(131, 227), S(133, 230), S(134, 233), S(142, 224), S(142, 221), S(141, 221), S(114, 229), S(132, 204)},
    // Queen PST
    {S(309, 408), S(296, 485), S(316, 477), S(313, 482), S(452, 394), S(417, 411), S(381, 427), S(383, 453),
     S(296, 414), S(268, 458), S(300, 470), S(298, 510), S(262, 545), S(374, 455), S(344, 463), S(391, 422),
     S(331, 391), S(312, 428), S(338, 408), S(303, 506), S(350, 490), S(398, 458), S(397, 443), S(398, 435),
     S(293, 451), S(313, 437), S(301, 453), S(308, 470), S(319, 498), S(339, 479), S(327, 526), S(339, 492),
     S(334, 394), S(299, 463), S(332, 433), S(319, 471), S(327, 454), S(334, 459), S(335, 483), S(331, 481),
     S(321, 424), S(344, 379), S(325, 433), S(342, 413), S(333, 432), S(342, 443), S(345, 455), S(341, 460),
     S(312, 417), S(335, 390), S(353, 385), S(351, 391), S(361, 384), S(356, 378), S(336, 371), S(351, 386),
     S(340, 381), S(345, 367), S(344, 383), S(351, 379), S(337, 402), S(317, 389), S(335, 373), S(285, 383)},
    // King PST
    {S(-87, -109), S(135, -91), S(146, -71), S(86, -58),  S(-97, 5),   S(-50, 23), S(83, -32), S(90, -67),
     S(170, -75),  S(86, -2),   S(30, 16),   S(99, 4),    S(5, 29),    S(52, 32),  S(42, 4),   S(-102, 27),
     S(86, -25),   S(86, -2),   S(109, 9),   S(-17, 37),  S(35, 24),   S(102, 39), S(131, 15), S(5, -9),
     S(27, -36),   S(11, 15),   S(32, 29),   S(-34, 60),  S(-36, 52),  S(-4, 41),  S(25, 12),  S(-53, -6),
     S(-47, -29),  S(32, -14),  S(-44, 43),  S(-106, 68), S(-111, 72), S(-58, 41), S(-43, 11), S(-71, -17),
     S(11, -37),   S(8, -5),    S(-37, 32),  S(-66, 49),  S(-70, 52),  S(-49, 37), S(-14, 12), S(-34, -12),
     S(11, -45),   S(27, -17),  S(-15, 18),  S(-60, 32),  S(-41, 31),  S(-28, 21), S(21, -8),  S(18, -34),
     S(-14, -85),  S(51, -61),  S(25, -30),  S(-65, 2),   S(2, -29),   S(-35, -5), S(38, -45), S(26, -79)},
};

// Pawn Eval
const int pawn_passed[3][8] = {
    {S(0, 0), S(0, 6), S(-1, 14), S(-19, 50), S(-1, 81), S(-17, 175), S(27, 182), S(0, 0)},
    {S(0, 0), S(0, 0), S(-1, 14), S(-4, 46), S(0, 91), S(39, 186), S(198, 137), S(0, 0)},
    {S(0, 0), S(0, 0), S(10, -17), S(-2, 14), S(24, 49), S(242, 29), S(36, -247), S(0, 0)},
};
const int pawn_phalanx[8] = {S(0, 0), S(5, 1), S(17, 4), S(22, 22), S(34, 68), S(162, 159), S(44, 600), S(0, 0)};
const int pawn_doubled[2] = {S(-11, -31), S(1, -20)};
const int pawn_isolated   = S(-12, -3);
const int pawn_support    = S(14, 15);

// Piece Eval
const int mobility[4][28] = {
    {S(85, 63),   S(102, 115), S(113, 133), S(119, 140), S(129, 144), S(134, 151), S(141, 148),
     S(144, 147), S(163, 126), S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0)},
    {S(74, 69),   S(91, 93),   S(101, 114), S(109, 127), S(115, 137), S(120, 144), S(124, 152),
     S(126, 153), S(128, 157), S(135, 153), S(150, 144), S(161, 145), S(111, 175), S(170, 141),
     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0)},
    {S(119, 166), S(131, 196), S(132, 223), S(139, 226), S(139, 236), S(145, 246), S(148, 254),
     S(151, 253), S(161, 255), S(160, 261), S(169, 262), S(174, 267), S(183, 267), S(179, 266),
     S(191, 263), S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0)},
    {S(335, 375), S(337, 353), S(342, 340), S(340, 353), S(346, 356), S(349, 372), S(347, 399),
     S(347, 418), S(350, 423), S(352, 440), S(354, 450), S(358, 457), S(355, 471), S(364, 472),
     S(365, 486), S(366, 497), S(364, 513), S(387, 486), S(386, 506), S(412, 495), S(413, 498),
     S(437, 489), S(406, 518), S(483, 481), S(481, 460), S(543, 422), S(517, 458), S(596, 384)},
};
const int attacked_by_pawn[6] = {S(0, 0), S(-49, -10), S(-58, -43), S(-95, 32), S(-52, -4), S(0, 0)};
const int open_file           = S(57, -5);
const int semi_open_file      = S(18, 16);
const int bishop_pair         = S(31, 65);
const int minor_behind_pawn   = S(6, 8);

// King Eval
const int king_open[28] = {S(61, -35), S(54, -2),   S(49, -8),   S(40, -6),   S(37, -13),  S(31, -8),   S(28, -10),
                           S(19, -15), S(10, 1),    S(-1, 4),    S(-21, 12),  S(-37, 19),  S(-38, 16),  S(-52, 19),
                           S(-62, 20), S(-75, 20),  S(-76, 17),  S(-88, 19),  S(-82, 12),  S(-82, 9),   S(-60, -3),
                           S(-76, -7), S(-57, -14), S(-92, -19), S(-32, -33), S(-80, -23), S(-43, -43), S(-83, -33)};
const int king_att_pawn = S(-31, 67);
#pragma once

#include "types.h"

int phase_values[6] = {0, 1, 1, 2, 4, 0};

const int material[6] = {S(60, 138), S(274, 414), S(299, 436), S(371, 769), S(945, 1342), S(0, 0)};

int pst[6][64] = {
    // Pawn PST
    {S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),     S(0, 0),     S(0, 0),
     S(27, 94),   S(34, 70),   S(14, 77),   S(57, 14),   S(39, 18),  S(21, 36),   S(-42, 81),  S(-47, 100),
     S(14, 41),   S(2, 45),    S(29, -3),   S(37, -49),  S(48, -51), S(63, -19),  S(40, 23),   S(13, 27),
     S(-13, 16),  S(-11, 2),   S(-7, -15),  S(-2, -35),  S(17, -34), S(2, -22),   S(-9, -3),   S(-8, -5),
     S(-19, -8),  S(-22, -9),  S(-13, -23), S(-4, -30),  S(2, -30),  S(-12, -20), S(-18, -15), S(-22, -21),
     S(-23, -14), S(-26, -14), S(-16, -22), S(-16, -20), S(-6, -18), S(-18, -15), S(-11, -22), S(-19, -27),
     S(-16, -8),  S(-13, -4),  S(-10, -13), S(-17, -17), S(-6, -7),  S(-2, -9),   S(11, -15),  S(-20, -24),
     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),     S(0, 0),     S(0, 0)},
    // Knight PST
    {S(-140, -64), S(-130, -9), S(-61, 1), S(-26, -14), S(8, -9),  S(-44, -33), S(-91, -11), S(-87, -96),
     S(-20, -16),  S(-5, -2),   S(20, -2), S(41, -2),   S(24, -8), S(84, -29),  S(5, -9),    S(30, -42),
     S(-3, -9),    S(20, 1),    S(32, 23), S(42, 22),   S(78, 4),  S(86, -5),   S(50, -11),  S(32, -22),
     S(-5, 8),     S(5, 14),    S(18, 30), S(45, 30),   S(28, 29), S(47, 27),   S(20, 13),   S(35, -5),
     S(-6, 13),    S(2, 11),    S(17, 34), S(23, 34),   S(28, 39), S(27, 25),   S(33, 10),   S(10, 8),
     S(-25, -4),   S(-7, 4),    S(3, 11),  S(7, 28),    S(20, 23), S(15, 5),    S(14, -2),   S(-1, -2),
     S(-35, -3),   S(-22, 0),   S(-9, 3),  S(5, 4),     S(7, 2),   S(-3, -1),   S(-12, -8),  S(-12, 6),
     S(-70, -7),   S(-23, -16), S(-32, 0), S(-15, 3),   S(-6, 2),  S(-13, -11), S(-20, -11), S(-42, -8)},
    // Bishop PST
    {S(-33, 5),   S(-55, 9), S(-52, 3),  S(-85, 14), S(-66, 8), S(-56, -2), S(-27, -1), S(-54, -9),
     S(-12, -17), S(-1, -8), S(-10, -3), S(-21, 4),  S(5, -9),  S(13, -10), S(3, -5),   S(5, -20),
     S(-1, 5),    S(13, -4), S(11, 2),   S(21, -8),  S(21, -4), S(53, 2),   S(39, -6),  S(28, 3),
     S(-11, 0),   S(7, 4),   S(11, 1),   S(27, 16),  S(21, 6),  S(22, 5),   S(9, 1),    S(-4, 3),
     S(-3, -1),   S(-6, 10), S(9, 17),   S(29, 15),  S(24, 15), S(5, 11),   S(0, 8),    S(12, -14),
     S(-5, -1),   S(14, 11), S(9, 10),   S(9, 15),   S(9, 20),  S(13, 9),   S(12, 2),   S(12, -9),
     S(3, 2),     S(8, -13), S(13, -9),  S(-2, 3),   S(9, 0),   S(6, -4),   S(17, -10), S(2, -15),
     S(-4, -12),  S(16, -2), S(-3, -6),  S(-12, 2),  S(-5, -1), S(-16, 7),  S(0, -15),  S(4, -30)},
    // Rook PST
    {S(4, 16),   S(-9, 25),  S(-3, 29),  S(-1, 22),  S(19, 13),  S(36, 9),   S(32, 13),  S(45, 5),
     S(-15, 20), S(-17, 31), S(0, 32),   S(18, 19),  S(9, 18),   S(47, 4),   S(38, 2),   S(55, -8),
     S(-27, 19), S(-1, 16),  S(-5, 17),  S(0, 9),    S(28, -3),  S(46, -11), S(87, -21), S(48, -19),
     S(-26, 18), S(-15, 14), S(-15, 19), S(-7, 10),  S(-4, -1),  S(11, -5),  S(27, -9),  S(14, -11),
     S(-34, 10), S(-35, 12), S(-24, 8),  S(-18, 4),  S(-18, 1),  S(-17, 0),  S(12, -14), S(-6, -13),
     S(-35, 2),  S(-30, -1), S(-26, -2), S(-22, -3), S(-14, -8), S(-2, -19), S(28, -38), S(3, -33),
     S(-33, -8), S(-28, -3), S(-17, -5), S(-14, -8), S(-8, -16), S(-6, -20), S(13, -33), S(-20, -22),
     S(-14, -4), S(-14, -6), S(-12, 0),  S(-7, -9),  S(-3, -15), S(-8, -10), S(1, -19),  S(-10, -19)},
    // Queen PST
    {S(-38, 7),   S(-48, 31), S(-12, 34), S(24, 16),  S(14, 28),  S(23, 20),   S(59, -42), S(4, 2),
     S(-10, -24), S(-33, 11), S(-34, 52), S(-45, 79), S(-38, 98), S(14, 41),   S(7, 15),   S(53, -1),
     S(-5, -20),  S(-11, -4), S(-13, 32), S(-5, 43),  S(11, 54),  S(45, 40),   S(60, -6),  S(53, 0),
     S(-19, -8),  S(-11, 2),  S(-13, 17), S(-14, 42), S(-13, 59), S(3, 46),    S(10, 44),  S(14, 20),
     S(-9, -19),  S(-18, 14), S(-11, 14), S(-6, 30),  S(-8, 30),  S(-4, 25),   S(5, 17),   S(10, 13),
     S(-10, -32), S(-4, -11), S(-6, 4),   S(-4, -1),  S(-4, 6),   S(5, 0),     S(14, -12), S(10, -23),
     S(-7, -35),  S(-3, -35), S(4, -34),  S(9, -33),  S(7, -28),  S(9, -51),   S(16, -80), S(23, -97),
     S(-13, -37), S(-9, -39), S(-4, -39), S(2, -34),  S(1, -52),  S(-16, -48), S(-3, -71), S(-6, -72)},
    // King PST
    {S(36, -124), S(19, -60), S(39, -42), S(-30, 3),   S(9, -19),  S(24, -16),  S(82, -29), S(97, -140),
     S(-47, -23), S(9, 12),   S(-25, 37), S(59, 21),   S(46, 25),  S(31, 36),   S(67, 16),  S(51, -22),
     S(-63, -12), S(42, 16),  S(4, 44),   S(-17, 62),  S(32, 56),  S(79, 39),   S(66, 21),  S(14, -15),
     S(-33, -22), S(-22, 19), S(-33, 50), S(-64, 73),  S(-54, 68), S(-23, 51),  S(-31, 28), S(-66, -3),
     S(-38, -29), S(-30, 11), S(-53, 44), S(-84, 68),  S(-75, 63), S(-45, 39),  S(-50, 19), S(-88, -4),
     S(-5, -33),  S(11, -1),  S(-33, 30), S(-54, 45),  S(-48, 43), S(-36, 30),  S(-4, 3),   S(-18, -18),
     S(67, -51),  S(33, -14), S(15, 3),   S(-20, 17),  S(-20, 19), S(-3, 8),    S(49, -19), S(52, -44),
     S(42, -91),  S(53, -56), S(41, -32), S(-35, -14), S(13, -34), S(-21, -15), S(37, -47), S(51, -91)},
};

// Pawn Eval
const int pawn_passed[3][8] = {
    {S(0, 0), S(-1, 7), S(-9, 19), S(-9, 47), S(3, 72), S(-7, 142), S(39, 146), S(0, 0)},
    {S(0, 0), S(0, 0), S(1, 15), S(-2, 46), S(14, 84), S(42, 164), S(186, 155), S(0, 0)},
    {S(0, 0), S(0, 0), S(2, -14), S(11, 5), S(35, 54), S(85, 152), S(52, 164), S(0, 0)},
};
const int pawn_phalanx[8] = {S(0, 0), S(5, -1), S(13, 9), S(26, 21), S(51, 68), S(115, 236), S(-46, 435), S(0, 0)};
const int pawn_doubled[2] = {S(-5, -31), S(-2, -17)};
const int pawn_isolated   = S(-6, -5);
const int pawn_support    = S(15, 13);

// Piece Eval
int mobility[4][28] = {
    // Knight (0-8)
    {S(-34, -61), S(-18, -24), S(-8, -3), S(-3, 7), S(1, 15), S(6, 23), S(13, 21), S(19, 17), S(24, 6)},
    // Bishop (0-13)
    {S(-42, -63), S(-32, -40), S(-23, -23), S(-16, -10), S(-9, -1), S(-4, 10), S(0, 14), S(3, 18), S(5, 22), S(10, 20),
     S(19, 15), S(25, 15), S(29, 23), S(34, 2)},
    // Rook (0-14)
    {S(-22, -48), S(-11, -26), S(-10, -19), S(-6, -15), S(-9, -7), S(-4, -2), S(-3, 3), S(-1, 5), S(2, 9), S(4, 13),
     S(7, 15), S(8, 19), S(13, 20), S(17, 14), S(14, 20)},
    // Queen (0-27)
    {S(-34, -312), S(-39, -149), S(-45, -79), S(-42, -48), S(-41, -30), S(-38, -22), S(-36, -6),
     S(-36, 7),    S(-33, 14),   S(-31, 18),  S(-30, 24),  S(-28, 31),  S(-26, 34),  S(-27, 43),
     S(-24, 46),   S(-23, 53),   S(-23, 64),  S(-22, 65),  S(-12, 63),  S(0, 56),    S(4, 59),
     S(53, 25),    S(50, 30),    S(65, 19),   S(145, -22), S(126, -21), S(78, 21),   S(70, 17)},
};
const int attacked_by_pawn[6] = {S(0, 0), S(-41, -6), S(-50, -28), S(-63, 18), S(-51, 52), S(0, 0)};
const int open_file           = S(33, 10);
const int semi_open_file      = S(13, 14);
const int bishop_pair         = S(20, 72);
const int minor_behind_pawn   = S(9, 8);
const int outpost             = S(16, 15);

// King Eval
const int king_open[28] = {S(44, 0),    S(51, -9),   S(44, -7),    S(38, -11),   S(31, -9),   S(27, -8),   S(23, -7),
                           S(16, -7),   S(13, -4),   S(1, 3),      S(-10, 5),    S(-24, 11),  S(-37, 12),  S(-55, 15),
                           S(-70, 18),  S(-88, 19),  S(-94, 16),   S(-106, 16),  S(-101, 10), S(-98, 3),   S(-116, 2),
                           S(-114, -6), S(-114, -9), S(-103, -18), S(-108, -21), S(-70, -30), S(-76, -34), S(-64, -28)};
const int king_att_pawn = S(38, 44);
const int king_shelter  = S(25, -9);
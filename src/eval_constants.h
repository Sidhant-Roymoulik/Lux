#pragma once

#include "types.h"

int phase_values[6] = {0, 1, 1, 2, 4, 0};

const int material[6] = {S(43, 142), S(150, 446), S(171, 477), S(219, 802), S(511, 1485), S(0, 0)};

int pst[6][64] = {
    // Pawn PST
    {S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),     S(0, 0),     S(0, 0),
     S(49, 75),   S(37, 74),   S(43, 52),   S(57, 22),   S(47, 21),  S(40, 32),   S(-45, 72),  S(-38, 76),
     S(-5, 43),   S(1, 30),    S(13, 6),    S(16, -30),  S(22, -30), S(46, -5),   S(9, 11),    S(-2, 18),
     S(-5, 9),    S(-8, -1),   S(-7, -13),  S(3, -33),   S(9, -26),  S(6, -18),   S(-11, -4),  S(-16, -2),
     S(-8, -9),   S(-14, -10), S(-9, -24),  S(-8, -27),  S(0, -26),  S(-12, -16), S(-13, -15), S(-17, -18),
     S(-10, -16), S(-20, -16), S(-15, -18), S(-14, -20), S(-8, -12), S(-15, -9),  S(-10, -20), S(-14, -26),
     S(-10, -9),  S(-14, -12), S(-15, -10), S(-14, -13), S(-16, -1), S(-1, -2),   S(7, -14),   S(-12, -33),
     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),    S(0, 0),     S(0, 0),     S(0, 0)},
    // Knight PST
    {S(-106, -79), S(-72, -9),  S(-84, 22),  S(-3, -2), S(38, -7), S(-60, 25), S(-20, -12), S(-80, -94),
     S(-5, -30),   S(-9, -8),   S(20, -4),   S(32, 25), S(36, 18), S(62, -24), S(-8, -9),   S(24, -33),
     S(-20, -16),  S(7, 5),     S(23, 33),   S(32, 31), S(55, 24), S(61, 34),  S(35, 9),    S(36, -23),
     S(5, -9),     S(8, 10),    S(17, 33),   S(26, 45), S(16, 46), S(30, 41),  S(19, 24),   S(28, 4),
     S(-2, -5),    S(2, 16),    S(13, 39),   S(13, 45), S(17, 43), S(14, 44),  S(29, 21),   S(9, 10),
     S(-12, -36),  S(1, -5),    S(3, 4),     S(7, 25),  S(13, 21), S(9, 3),    S(8, -4),    S(0, -27),
     S(-26, -16),  S(-16, -7),  S(-7, -14),  S(2, 2),   S(-1, 2),  S(1, -20),  S(-11, -11), S(-6, -11),
     S(-69, -52),  S(-12, -44), S(-29, -14), S(-11, 1), S(-5, -6), S(-7, -21), S(-9, -33),  S(-57, -26)},
    // Bishop PST
    {S(-21, 7),  S(-45, 19), S(-85, 22), S(-62, 26), S(-58, 19), S(-56, 19), S(13, 1),   S(-18, 9),
     S(-31, 5),  S(-2, 4),   S(-6, 3),   S(-16, 13), S(-4, 11),  S(12, 4),   S(-6, 4),   S(6, -6),
     S(-4, -2),  S(0, 8),    S(23, 1),   S(14, 2),   S(28, 2),   S(32, 17),  S(31, 7),   S(15, 5),
     S(-10, -2), S(11, 1),   S(7, 1),    S(31, 6),   S(16, 14),  S(22, 2),   S(15, 7),   S(4, 5),
     S(-2, -11), S(6, 0),    S(9, 13),   S(17, 15),  S(22, 10),  S(4, 9),    S(7, 0),    S(9, -11),
     S(-2, -13), S(8, -1),   S(4, 4),    S(8, 6),    S(6, 6),    S(8, -2),   S(7, -8),   S(10, -10),
     S(4, -19),  S(7, -19),  S(10, -11), S(-1, -5),  S(1, -8),   S(5, -22),  S(16, -21), S(5, -45),
     S(9, -19),  S(8, -7),   S(-5, -16), S(-12, -7), S(-16, -1), S(-8, -14), S(-5, -12), S(4, -15)},
    // Rook PST
    {S(10, 26),   S(10, 30),   S(-7, 37),   S(5, 29),    S(18, 24),   S(60, 13),   S(63, 11),  S(59, 15),
     S(-10, 27),  S(-16, 33),  S(3, 29),    S(18, 30),   S(16, 31),   S(55, 1),    S(24, 11),  S(38, 5),
     S(-19, 19),  S(6, 11),    S(3, 19),    S(20, 8),    S(33, 2),    S(58, 4),    S(78, -20), S(23, 4),
     S(-20, 10),  S(-12, 13),  S(-7, 14),   S(10, 7),    S(1, 10),    S(11, 6),    S(22, -2),  S(8, 0),
     S(-27, -4),  S(-31, 12),  S(-29, 12),  S(-21, 5),   S(-23, 3),   S(-14, 5),   S(2, -2),   S(-7, -10),
     S(-31, -20), S(-26, -9),  S(-30, -8),  S(-23, -13), S(-24, -11), S(-15, -14), S(8, -22),  S(-12, -28),
     S(-44, -18), S(-24, -25), S(-22, -20), S(-21, -22), S(-20, -23), S(-6, -32),  S(-1, -35), S(-41, -17),
     S(-17, -20), S(-16, -15), S(-13, -13), S(-8, -19),  S(-9, -19),  S(-7, -14),  S(2, -25),  S(-8, -37)},
    // Queen PST
    {S(-22, 23),  S(-12, 27),  S(-13, 51), S(11, 39),  S(9, 58),   S(45, 52),   S(55, 42),   S(49, 37),
     S(-22, -3),  S(-44, 28),  S(-21, 27), S(-38, 75), S(-20, 95), S(23, 79),   S(-16, 97),  S(25, 51),
     S(-17, -26), S(-14, -14), S(-19, 14), S(-8, 29),  S(-2, 73),  S(35, 83),   S(41, 74),   S(20, 75),
     S(-9, -40),  S(-10, -4),  S(-14, -1), S(-16, 41), S(-18, 75), S(-5, 83),   S(9, 69),    S(12, 49),
     S(-5, -45),  S(-6, -14),  S(-6, -10), S(-12, 28), S(-12, 28), S(0, 26),    S(6, 7),     S(7, 24),
     S(-8, -48),  S(0, -37),   S(-1, -18), S(-3, -25), S(-3, -24), S(-1, -11),  S(9, -33),   S(8, -39),
     S(-7, -58),  S(-1, -53),  S(5, -65),  S(2, -46),  S(3, -53),  S(11, -93),  S(17, -105), S(10, -83),
     S(-1, -67),  S(-2, -70),  S(2, -77),  S(5, -56),  S(3, -76),  S(-13, -71), S(2, -109),  S(-4, -87)},
    // King PST
    {S(156, -193), S(93, -77),  S(98, -61), S(57, -31), S(62, -49),  S(65, -48), S(86, -51),  S(66, -171),
     S(-6, -40),   S(17, 28),   S(88, 6),   S(69, 0),   S(26, 8),    S(52, 9),   S(11, 31),   S(-10, -45),
     S(-28, 4),    S(43, 31),   S(61, 34),  S(23, 32),  S(52, 22),   S(70, 31),  S(46, 29),   S(-40, -6),
     S(-46, 12),   S(27, 20),   S(24, 45),  S(-1, 55),  S(-6, 51),   S(27, 39),  S(-3, 22),   S(-68, -1),
     S(-35, -19),  S(1, 15),    S(16, 36),  S(-42, 64), S(-20, 56),  S(-16, 37), S(-4, 15),   S(-65, -12),
     S(-48, -6),   S(-40, 18),  S(-32, 33), S(-58, 51), S(-47, 46),  S(-42, 36), S(-31, 12),  S(-35, -9),
     S(-9, -8),    S(-29, 9),   S(-46, 26), S(-87, 38), S(-62, 30),  S(-67, 30), S(-16, 1),   S(0, -28),
     S(-26, -48),  S(-11, -19), S(-30, -4), S(-88, -2), S(-43, -35), S(-84, 7),  S(-16, -24), S(0, -77)},
};

// Pawn Eval
const int pawn_passed[3][8] = {
    {S(0, 0), S(-5, 14), S(-9, 23), S(-9, 47), S(3, 65), S(8, 121), S(36, 125), S(0, 0)},
    {S(0, 0), S(0, 0), S(-3, 16), S(-6, 43), S(14, 76), S(48, 154), S(185, 142), S(0, 0)},
    {S(0, 0), S(0, 0), S(0, -6), S(-13, 22), S(33, 46), S(75, 120), S(133, 254), S(0, 0)},
};
const int pawn_phalanx[8] = {S(0, 0), S(4, -2), S(9, 5), S(13, 20), S(23, 75), S(45, 153), S(-3, 341), S(0, 0)};
const int pawn_doubled[2] = {S(-6, -29), S(-2, -19)};
const int pawn_isolated   = S(-4, -8);
const int pawn_support    = S(10, 9);

// Piece Eval
int mobility[4][28] = {
    // Knight (0-8)
    {S(-16, -65), S(-6, -26), S(-4, -2), S(-2, 11), S(-1, 18), S(1, 25), S(4, 24), S(8, 18), S(16, -1)},
    // Bishop (0-13)
    {S(-18, -80), S(-17, -49), S(-14, -31), S(-11, -17), S(-8, -2), S(-6, 10), S(-6, 19), S(-7, 23), S(-5, 28),
     S(-1, 29), S(3, 26), S(16, 20), S(25, 26), S(49, -3)},
    // Rook (0-14)
    {S(-14, -46), S(-11, -25), S(-10, -19), S(-9, -12), S(-10, -3), S(-8, 1), S(-7, 8), S(-5, 9), S(-3, 13), S(-2, 18),
     S(-1, 21), S(3, 22), S(8, 20), S(17, 8), S(54, -15)},
    // Queen (0-27)
    {S(-19, -273), S(-21, -112), S(-21, -74), S(-19, -48), S(-18, -28), S(-18, -16), S(-17, -4),
     S(-17, 12),   S(-15, 19),   S(-14, 23),  S(-13, 29),  S(-11, 33),  S(-11, 36),  S(-10, 41),
     S(-11, 43),   S(-11, 47),   S(-12, 49),  S(-12, 49),  S(-7, 46),   S(-5, 45),   S(-3, 41),
     S(-1, 36),    S(-2, 33),    S(10, 25),   S(-71, 89),  S(57, -8),   S(126, -66), S(166, -66)},
};
const int attacked_by_pawn[6] = {S(0, 0), S(-17, -43), S(-21, -56), S(-16, -9), S(-11, -19), S(0, 0)};
const int open_file           = S(23, 11);
const int semi_open_file      = S(9, 11);
const int bishop_pair         = S(6, 72);
const int minor_behind_pawn   = S(6, 15);
const int outpost             = S(7, 19);

// King Eval
const int king_open[28] = {S(21, 2),    S(19, 7),   S(17, 7),    S(18, 3),    S(18, 0),    S(17, 0),    S(15, 0),
                           S(12, -1),   S(11, 2),   S(6, 3),     S(-1, 5),    S(-6, 6),    S(-15, 8),   S(-21, 9),
                           S(-29, 10),  S(-42, 10), S(-46, 10),  S(-54, 8),   S(-61, 6),   S(-61, 1),   S(-64, -2),
                           S(-62, -11), S(-83, -8), S(-80, -17), S(-70, -26), S(-63, -34), S(-25, -51), S(-55, -43)};
const int king_att_pawn = S(21, 55);
const int king_shelter  = S(14, -3);
#pragma once

#include "types.h"

int phase_values[6] = {0, 1, 1, 2, 4, 0};

const int material[6] = {S(66, 77), S(181, 169), S(184, 171), S(209, 272), S(405, 505), S(0, 0)};

int pst[6][64] = {
    // Pawn PST
    {S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),   S(0, 0),    S(0, 0),    S(0, 0),     S(0, 0),
     S(43, 190), S(52, 172), S(36, 141), S(91, 96), S(47, 126), S(128, 97), S(-46, 180), S(-76, 218),
     S(35, 99),  S(21, 91),  S(48, 57),  S(45, 16), S(89, -1),  S(101, 30), S(53, 69),   S(23, 82),
     S(12, 71),  S(15, 54),  S(19, 38),  S(29, 18), S(25, 32),  S(18, 41),  S(14, 56),   S(1, 59),
     S(4, 53),   S(-3, 49),  S(17, 31),  S(22, 23), S(27, 29),  S(20, 31),  S(9, 38),    S(-3, 38),
     S(1, 41),   S(-7, 43),  S(6, 33),   S(-2, 38), S(6, 42),   S(10, 39),  S(22, 27),   S(4, 28),
     S(4, 51),   S(16, 41),  S(7, 47),   S(4, 38),  S(8, 56),   S(33, 41),  S(49, 30),   S(8, 25),
     S(0, 0),    S(0, 0),    S(0, 0),    S(0, 0),   S(0, 0),    S(0, 0),    S(0, 0),     S(0, 0)},
    // Knight PST
    {S(-113, 41), S(-49, 60), S(6, 91),   S(23, 61),   S(132, 52),  S(-22, 61),  S(37, 24),   S(-33, -13),
     S(-17, 72),  S(11, 95),  S(139, 57), S(82, 99),   S(86, 81),   S(138, 50),  S(69, 68),   S(59, 30),
     S(16, 68),   S(120, 70), S(94, 114), S(120, 109), S(153, 92),  S(202, 76),  S(154, 59),  S(125, 31),
     S(70, 75),   S(95, 97),  S(79, 131), S(129, 122), S(110, 126), S(137, 110), S(100, 100), S(102, 77),
     S(70, 79),   S(80, 86),  S(91, 117), S(92, 127),  S(104, 117), S(100, 117), S(107, 97),  S(83, 82),
     S(57, 71),   S(67, 90),  S(84, 91),  S(85, 109),  S(99, 105),  S(99, 83),   S(102, 62),  S(68, 72),
     S(54, 58),   S(32, 77),  S(65, 85),  S(88, 82),   S(87, 85),   S(83, 71),   S(65, 69),   S(72, 41),
     S(-48, 104), S(67, 55),  S(31, 74),  S(51, 91),   S(83, 70),   S(44, 81),   S(69, 49),   S(64, 33)},
    // Bishop PST
    {S(63, 95),   S(75, 92),   S(-56, 122), S(-25, 122), S(16, 123),  S(20, 115),  S(67, 109),  S(107, 78),
     S(47, 115),  S(84, 108),  S(48, 124),  S(34, 110),  S(103, 109), S(137, 101), S(98, 105),  S(45, 98),
     S(91, 107),  S(111, 104), S(131, 106), S(116, 104), S(127, 107), S(155, 110), S(135, 109), S(118, 107),
     S(83, 107),  S(114, 111), S(99, 125),  S(143, 121), S(119, 129), S(130, 119), S(113, 107), S(100, 114),
     S(93, 103),  S(104, 111), S(109, 123), S(119, 131), S(132, 113), S(100, 122), S(105, 106), S(110, 101),
     S(94, 103),  S(112, 108), S(108, 121), S(105, 121), S(104, 128), S(127, 104), S(107, 108), S(105, 102),
     S(105, 104), S(115, 92),  S(111, 102), S(97, 110),  S(106, 109), S(104, 104), S(130, 85),  S(96, 81),
     S(70, 101),  S(103, 116), S(92, 105),  S(86, 112),  S(89, 109),  S(81, 109),  S(41, 123),  S(78, 106)},
    // Rook PST
    {S(139, 253), S(151, 247), S(112, 265), S(176, 241), S(184, 239), S(126, 254), S(144, 249), S(142, 246),
     S(134, 253), S(131, 257), S(166, 246), S(177, 240), S(197, 221), S(213, 226), S(127, 259), S(154, 245),
     S(106, 253), S(127, 253), S(129, 247), S(138, 246), S(129, 241), S(189, 220), S(220, 214), S(149, 227),
     S(97, 251),  S(115, 243), S(123, 256), S(140, 237), S(136, 241), S(176, 231), S(135, 236), S(112, 250),
     S(96, 246),  S(106, 248), S(115, 248), S(128, 237), S(138, 227), S(139, 226), S(163, 218), S(111, 231),
     S(103, 234), S(117, 234), S(125, 225), S(123, 228), S(134, 221), S(154, 210), S(147, 216), S(119, 215),
     S(104, 232), S(125, 226), S(118, 231), S(132, 232), S(142, 216), S(149, 212), S(145, 208), S(85, 235),
     S(132, 226), S(135, 229), S(138, 231), S(144, 224), S(144, 220), S(146, 218), S(118, 228), S(135, 204)},
    // Queen PST
    {S(312, 405), S(296, 485), S(316, 477), S(318, 479), S(455, 392), S(418, 411), S(387, 424), S(390, 449),
     S(300, 411), S(270, 457), S(300, 470), S(302, 507), S(264, 544), S(378, 455), S(350, 458), S(396, 419),
     S(332, 391), S(314, 426), S(340, 407), S(306, 505), S(353, 491), S(398, 459), S(399, 442), S(397, 437),
     S(296, 450), S(315, 437), S(303, 452), S(308, 472), S(319, 500), S(341, 479), S(330, 525), S(341, 489),
     S(335, 394), S(299, 464), S(333, 436), S(322, 469), S(330, 454), S(335, 459), S(336, 482), S(332, 479),
     S(323, 423), S(346, 380), S(328, 432), S(344, 413), S(335, 430), S(343, 443), S(347, 454), S(342, 461),
     S(314, 416), S(338, 389), S(355, 386), S(353, 390), S(364, 383), S(361, 375), S(342, 367), S(353, 386),
     S(342, 381), S(348, 366), S(346, 382), S(355, 378), S(341, 400), S(324, 385), S(336, 374), S(287, 381)},
    // King PST
    {S(-73, -115), S(147, -96), S(160, -76), S(103, -65), S(-78, -2),  S(-31, 15), S(101, -39), S(106, -73),
     S(184, -81),  S(98, -7),   S(44, 11),   S(115, -2),  S(22, 22),   S(70, 24),  S(59, -3),   S(-81, 19),
     S(101, -31),  S(99, -7),   S(122, 4),   S(-4, 32),   S(50, 18),   S(117, 34), S(148, 9),   S(24, -17),
     S(40, -41),   S(23, 12),   S(46, 24),   S(-20, 55),  S(-22, 47),  S(9, 37),   S(40, 6),    S(-34, -13),
     S(-34, -34),  S(41, -17),  S(-33, 40),  S(-95, 65),  S(-98, 67),  S(-45, 36), S(-27, 6),   S(-53, -24),
     S(19, -40),   S(11, -5),   S(-30, 31),  S(-58, 48),  S(-63, 51),  S(-39, 35), S(-5, 10),   S(-19, -17),
     S(18, -47),   S(19, -12),  S(-17, 20),  S(-59, 33),  S(-38, 32),  S(-28, 23), S(18, -4),   S(27, -35),
     S(-14, -83),  S(29, -49),  S(10, -22),  S(-73, 6),   S(-11, -21), S(-49, 4),  S(18, -32),  S(26, -77)},
};

// Pawn Eval
const int pawn_passed[3][8] = {
    {S(0, 0), S(1, 5), S(1, 14), S(-17, 49), S(0, 81), S(-17, 174), S(27, 183), S(0, 0)},
    {S(0, 0), S(0, 0), S(-1, 14), S(-2, 45), S(5, 89), S(41, 186), S(201, 137), S(0, 0)},
    {S(0, 0), S(0, 0), S(6, -12), S(3, 11), S(29, 48), S(253, 27), S(38, -243), S(0, 0)},
};
const int pawn_phalanx[8] = {S(0, 0), S(4, 2), S(16, 5), S(21, 23), S(35, 68), S(168, 159), S(52, 599), S(0, 0)};
const int pawn_doubled[2] = {S(-12, -31), S(0, -20)};
const int pawn_isolated   = S(-11, -3);
const int pawn_support    = S(14, 15);

// Piece Eval
const int mobility[4][28] = {
    {S(85, 63),   S(104, 114), S(115, 132), S(120, 140), S(130, 144), S(135, 151), S(142, 147),
     S(146, 146), S(164, 125), S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0)},
    {S(75, 70),   S(91, 94),   S(101, 113), S(110, 126), S(116, 137), S(121, 144), S(125, 151),
     S(127, 153), S(130, 157), S(137, 153), S(152, 143), S(164, 144), S(113, 174), S(169, 142),
     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0)},
    {S(120, 165), S(132, 195), S(134, 223), S(141, 226), S(141, 235), S(147, 245), S(150, 254),
     S(154, 252), S(164, 254), S(163, 260), S(171, 261), S(177, 266), S(185, 266), S(181, 265),
     S(194, 262), S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),
     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0),     S(0, 0)},
    {S(338, 374), S(338, 351), S(343, 341), S(341, 354), S(348, 357), S(351, 373), S(349, 399),
     S(349, 418), S(353, 423), S(355, 439), S(357, 450), S(361, 456), S(359, 470), S(366, 472),
     S(368, 485), S(369, 495), S(368, 512), S(392, 484), S(389, 505), S(417, 494), S(417, 497),
     S(441, 487), S(413, 514), S(487, 479), S(485, 458), S(547, 420), S(516, 458), S(596, 385)},
};
const int attacked_by_pawn[6] = {S(0, 0), S(-49, -11), S(-59, -42), S(-97, 33), S(-53, -3), S(0, 0)};
const int open_file           = S(56, -4);
const int semi_open_file      = S(16, 17);
const int bishop_pair         = S(31, 64);
const int minor_behind_pawn   = S(7, 8);

// King Eval
const int king_open[28] = {S(54, -30),  S(47, 1),    S(44, -4),   S(37, -2),   S(35, -9),   S(30, -5),   S(28, -8),
                           S(20, -13),  S(12, 2),    S(3, 5),     S(-16, 12),  S(-32, 18),  S(-31, 15),  S(-46, 18),
                           S(-55, 19),  S(-68, 19),  S(-67, 15),  S(-78, 16),  S(-71, 9),   S(-71, 6),   S(-48, -7),
                           S(-65, -10), S(-46, -17), S(-81, -22), S(-22, -35), S(-70, -26), S(-32, -46), S(-73, -35)};
const int king_att_pawn = S(-22, 64);
const int king_shelter  = S(24, -12);